local modems = {peripheral.find("modem")}
local monitorsGot = {peripheral.find("monitor")}

local newPartChannel = 2000
local messageChannel = 3000
for i,v in pairs(modems) do
    v.open(newPartChannel)
    v.open(messageChannel)
end
local function sendMessage(channel, message)
    for i,v in pairs(modems) do
        v.transmit(channel, 1, message)
    end
end

local variablesValues = {}
local computerName = os.getComputerID()

local askForInitGUIEvent = "askForInitGUI"
local sendInitGUIEvent = "sendInitGUI"
local extCompEvent = "externalComputerEvent"
local mainCompSetValueEvent = "mainComputerSetValEvent"

local statusName = "precisionStatus"..computerName
local queueName = "precisionQueueNumber"..computerName
local values = {statusName, queueName}

local addToQueueEvent = "precisionQueueAddEvent"..computerName
local toggleStatusEvent = "toggleStatus"..computerName

local function setValue(set, val)
    variablesValues[set] = val
end

local dataDirectory = "precisionMechanismMaker"
local function saveData()
    local dataToSave = variablesValues

    if not fs.exists('/data') then
        fs.makeDir('/data')
    end
    local f = fs.open('/data/'..dataDirectory, 'w')
    f.write(textutils.serialize(dataToSave))
    f.close()
end
local function loadData()
    local data = nil
    if fs.exists('/data/'..dataDirectory) then
        local f = fs.open('/data/'..dataDirectory, 'r')
        data = textutils.unserialize(f.readAll())
        f.close()
    end

    if data ~= nil then
        for i,v in pairs(data) do
            variablesValues[i] = v
        end
    end
end

local function sendValues()
    for i,v in pairs(values) do
        sendMessage(messageChannel, textutils.serialise({mainCompSetValueEvent, {v, variablesValues[v]}}))
    end
end

local statuses = {"off", "on", "error"}

setValue(statusName, statuses[1])
setValue(queueName, 0)
loadData()

local initGUIStuff = {
    {
        ["type"] = "label",
        ["vars"] = {
            ["backgroundColor"] = colors.black,
            ["textColor"] = colors.white,
            ["text"] = "Precision Mechanism Farm",
        }
    },
    {
        ["type"] = "status",
        ["vars"] = {
            ["offColor"] = colors.black,
            ["onColor"] = colors.green,
            ["errorColor"] = colors.red,
            ["otherColor"] = colors.black,
            ["backgroundColor"] = colors.white,
            ["varName"] = statusName
        }
    },
    {
        ["type"] = "button",
        ["vars"] = {
            ["backgroundColor"] = colors.black,
            ["textColor"] = colors.white,
            ["text"] = "Toggle",
            ["eventName"] = toggleStatusEvent
        }
    },
    {
        ["type"] = "labelVar",
        ["vars"] = {
            ["backgroundColor"] = colors.black,
            ["textColor"] = colors.white,
            ["varTextColor"] = colors.green,
            ["text"] = "In queue: ",
            ["afterText"] = "!",
            ["varName"] = queueName
        }
    },
    {
        ["type"] = "buttonNumber",
        ["vars"] = {
            ["backgroundColor"] = colors.black,
            ["textColor"] = colors.white,
            ["text"] = "[Add to queue] ",
            ["min"] = 0,
            ["max"] = 100,
            ["changeamt"] = 1,
            ["default"] = 0,
            ["eventName"] = addToQueueEvent
        }
    },
    {
        ["type"] = "whitespace",
        ["vars"] = 1
    }
}

local updateMonitor = function(monitor)
    monitor.clear()
    local sizeX, sizeY = monitor.getSize()
    monitor.setBackgroundColor(colors.black)
    monitor.setTextColor(colors.white)
    monitor.clear()

    local currentX = 1
    local currentY = 1

    local function write(txt)
        monitor.setCursorPos(currentX, currentY)
        monitor.write(txt)
    end

    write("hi")
end

local messageListen = function()
    while true do 
        local event, side, channel, replyChannel, message, distance = os.pullEvent("modem_message")
        print("modem message!")
        print(message)

        local tabl = textutils.unserialise(message)
        local eventName, value = tabl[1], tabl[2]

        if channel == newPartChannel then
            if eventName == askForInitGUIEvent then
                sendMessage(newPartChannel, textutils.serialise({
                    sendInitGUIEvent,
                    initGUIStuff
                }))
            end
        elseif channel == messageChannel then
            if eventName == extCompEvent then

            elseif eventName == addToQueueEvent then
                local number = value[1]
            elseif eventName == toggleStatusEvent then
                --just toggle on if off yada

                if variablesValues[statusName] == statuses[2] then
                    setValue(statusName, statuses[1])
                else
                    setValue(statusName, statuses[2])
                end
            end
        end
    end
end

local function mainFunction()
    if variablesValues[statusName] == statuses[2] then
        
    end
end

local mainLoop = function()
    while true do 
        os.sleep(0.5)
        mainFunction()
        saveData()
        sendValues()
    end
end

parallel.waitForAny(messageListen, mainLoop)
mainLoop()
