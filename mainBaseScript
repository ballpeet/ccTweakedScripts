local newPartChannel = 2000
local messageChannel = 3000
local askForInitGUIEvent = "askForInitGUI"
local sendInitGUIEvent = "sendInitGUI"
local extCompEvent = "externalComputerEvent"
local mainCompEvent = "mainComputerEvent"

local modems = {peripheral.find("modem")}
for i,v in pairs(modems) do
    v.open(newPartChannel)
    v.open(messageChannel)
end
local sendMessage = function(channel, message)
    for i,v in pairs(modems) do
        v.transmit(channel, 1, message)
    end
end

local buttonToggleDatas = {
    ["precisionStatus"] = false
}
local buttonLayout = {

}

local updateMonitor = function(monitor)
    monitor.clear()
    local sizeX, sizeY = monitor.getSize()
    monitor.setBackgroundColor(colors.black)
    monitor.setTextColor(colors.white)
    monitor.clear()

    local currentX = 1
    local currentY = 1

    for i,tabl in pairs(buttonLayout) do
        local typ = tabl["type"]
        local vars = tabl["vars"]

        monitor.setCursorPos(currentX, currentY)

        if typ == "status" then

        elseif typ == "whitespace" then
            currentY = currentY + vars
        elseif typ == "button" then
            monitor.blit(vars["text"], vars["textColor"], vars["backgroundColor"])

            --add logic
        elseif typ == "labelVar" then
            local valGot = buttonToggleDatas[vars["varName"]]
            if valGot == nil then
                valGot = "NULL"
            else
                valGot = tostring(valGot)
            end
            monitor.blit(vars["text"], vars["textColor"], vars["backgroundColor"])
            monitor.blit(valGot, vars["varTextColor"], vars["backgroundColor"])
            monitor.blit(vars["afterText"], vars["textColor"], vars["backgroundColor"])
        elseif typ == "label" then
            monitor.blit(vars["text"], vars["textColor"], vars["backgroundColor"])
        end

        currentY = currentY + 1
    end
end

os.sleep(1)

sendMessage(newPartChannel, {askForInitGUIEvent, 0})

local mainLoop = function()
    while true do 
        local monitorsGot = { peripheral.find("monitor") }
        for i,v in pairs(monitorsGot) do
            updateMonitor(v)
        end
        print("tick")

        os.sleep(1)
    end
end

local listenCorou = coroutine.create(function()
    while true do 
        local event, side, channel, replyChannel, message, distance = os.pullEvent("modem_message")
        print("modem message!")

        local tabl = textutils.unserialise(message)
        local eventName, value = tabl[1], tabl[2]

        if channel == newPartChannel then
            if eventName == sendInitGUIEvent then
                for i,v in pairs(value) do
                    table.insert(buttonLayout, v)
                end
            end
        elseif channel == messageChannel then
            if eventName == mainCompEvent then

            end
        end
    end
end)
local touchCorou = coroutine.create(function()
    while true do 
        local event, side, x, y = os.pullEvent("monitor_touch")
        print("monitor touched!")
    end
end)

coroutine.resume(listenCorou)
coroutine.resume(touchCorou)
mainLoop()
